{"version":3,"file":"component---src-pages-index-tsx-ce0ad3cbd0be21d7b755.js","mappings":"gMA4BA,MApBiC,EAAGA,MAAAA,EAAQ,EAAGC,OAAAA,KAY3C,uBAAKC,UCnBY,kCDoBf,0BAAQA,UCnBe,yCDmBoBC,QAZ7B,KACZH,GAAS,GAGbC,EAAOD,EAAQ,MASb,wBAAME,UClBO,gCDkBmBF,GAChC,0BAAQE,UCpBe,yCDoBoBC,QAR7B,KAChBF,EAAOD,EAAQ,OEmBnB,MAxB0C,EAAGI,KAAAA,EAAMH,OAAAA,EAAQI,OAAAA,KAEvD,uBAAKH,UCZqB,oDDaxB,yBACEA,UCbW,wCDcXI,aAAcF,EAAKG,MACnBC,YAAa,QACbC,QAASC,IACPT,EAAO,IAAKG,EAAMG,MAAOG,EAAEC,cAAcX,WAG7C,uBAAKE,UCnBa,8CDoBhB,gBAAC,EAAD,CACEF,MAAOI,EAAKJ,MACZC,OAAQD,IACNC,EAAO,IAAKG,EAAMJ,MAAAA,QAIxB,0BAAQE,UC1BW,8CD0BoBC,QAAS,IAAME,OEfrD,MAAMO,GAA0BC,EAAAA,EAAAA,eAAgC,CACrEC,KAAM,IAAM,KACZC,KAAM,SCfFC,EAAiB,eAEVC,EAAqC,CAChDH,KAAM,KACJ,GAA4B,oBAAjBI,aACT,OAAO,KAGT,MAAMC,EAAcD,aAAaE,QAAQJ,GACzC,OAAKG,EAGEE,KAAKC,MAAMH,GAFT,MAIXJ,KAAOI,IACuB,oBAAjBD,cAIXA,aAAaK,QAAQP,EAAgBK,KAAKG,UAAUL,MCpBjD,I,oBCwBP,MAAMM,EAAU,CAACC,EAAuBC,KACtC,IAAIC,EACJ,OAAQD,EAAOE,MACb,IAAK,SAGH,OAFAD,EAAW,IAAIF,EAAOC,EAAOvB,MAC7Ba,EAAiBF,KAAKa,GACfA,EAET,IAAK,SAIH,OAHAA,EAAW,IAAIF,GACfE,EAASD,EAAOG,OAASH,EAAOvB,KAChCa,EAAiBF,KAAKa,GACfA,EAET,IAAK,SAGH,OAFAA,EAAWF,EAAMK,QAAO,CAACC,EAAGC,IAAMA,IAAMN,EAAOG,QAC/Cb,EAAiBF,KAAKa,GACfA,EAET,QAEE,OADiBD,IA4CvB,MAvCuC,KAAO,IAAD,EAC3C,MAAM,EAACO,EAAD,EAASC,IAAaC,EAAAA,EAAAA,UAAS,IAE/B,EAACjB,EAAD,EAAckB,IAAYC,EAAAA,EAAAA,YAC9Bb,EADwC,UAExCR,EAAiBH,cAFuB,QAEb,IAG7B,OACE,gBAACF,EAAwB2B,SAAzB,CAAkCvC,MAAOiB,GACvC,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAKuB,MAAM,SACX,uBAAKtC,UD7DY,oCC8DdiB,EAAYsB,KAAI,CAACrC,EAAM6B,IACtB,gBAAC,EAAD,CACE7B,KAAMA,EACNH,OAAQyC,GACNL,EAAS,CAAER,KAAM,SAAUC,MAAOG,EAAG7B,KAAMsC,IAE7CrC,OAAQ,IAAMgC,EAAS,CAAER,KAAM,SAAUC,MAAOG,IAChDU,IAAKvC,EAAKwC,OAGd,0BACE1C,UDxEc,oCCyEdC,QAAS,KACPkC,EAAS,CACPR,KAAM,SACNzB,KAAM,CAAEwC,GAAIV,EAAQ3B,MAAO,GAAIP,MAAO,KAExCmC,EAAUD,GAAUW,OAAOC,iBAAmB,EAAIZ,EAAS","sources":["webpack://gatsby-starter-default/./src/components/counter.tsx","webpack://gatsby-starter-default/./src/styles/components/counter.module.css","webpack://gatsby-starter-default/./src/components/counterWithLabel.tsx","webpack://gatsby-starter-default/./src/styles/components/counterWithLabel.module.css","webpack://gatsby-starter-default/./src/contexts/storeContext.ts","webpack://gatsby-starter-default/./src/modules/localStorage.ts","webpack://gatsby-starter-default/./src/styles/pages/index.module.css","webpack://gatsby-starter-default/./src/pages/index.tsx"],"sourcesContent":["import React from \"react\"\nimport * as styles from \"~/styles/components/counter.module.css\"\n\ntype Props = {\n  value?: number\n  update: (value: number) => void\n}\n\nconst Counter: React.FC<Props> = ({ value = 0, update }) => {\n  const decrement = () => {\n    if (value <= 0) {\n      return\n    }\n    update(value - 1)\n  }\n  const increment = () => {\n    update(value + 1)\n  }\n\n  return (\n    <div className={styles.counter}>\n      <button className={styles.decrementButton} onClick={decrement}></button>\n      <span className={styles.value}>{value}</span>\n      <button className={styles.incrementButton} onClick={increment}></button>\n    </div>\n  )\n}\n\nexport default Counter\n","// extracted by mini-css-extract-plugin\nexport var counter = \"counter-module--counter--2Dv6q\";\nexport var decrementButton = \"counter-module--decrementButton--3KpC6\";\nexport var incrementButton = \"counter-module--incrementButton--d5zmp\";\nexport var value = \"counter-module--value--ygrTP\";","import React from \"react\"\nimport type { CounterProps } from \"~/contexts/storeContext\"\nimport * as styles from \"~/styles/components/counterWithLabel.module.css\"\nimport Counter from \"./counter\"\n\ntype Props = {\n  prop: CounterProps\n  update: (prop: CounterProps) => void\n  remove: () => void\n}\n\nconst CounterWithLabel: React.FC<Props> = ({ prop, update, remove }) => {\n  return (\n    <div className={styles.counterWithLabel}>\n      <input\n        className={styles.label}\n        defaultValue={prop.label}\n        placeholder={\"カウンタ名\"}\n        onInput={e => {\n          update({ ...prop, label: e.currentTarget.value })\n        }}\n      />\n      <div className={styles.counterRow}>\n        <Counter\n          value={prop.value}\n          update={value => {\n            update({ ...prop, value })\n          }}\n        />\n      </div>\n      <button className={styles.closeButton} onClick={() => remove()}></button>\n    </div>\n  )\n}\n\nexport default CounterWithLabel\n","// extracted by mini-css-extract-plugin\nexport var counterWithLabel = \"counterWithLabel-module--counterWithLabel--39Zi7\";\nexport var label = \"counterWithLabel-module--label--2P_Sz\";\nexport var counterRow = \"counterWithLabel-module--counterRow--2D_g6\";\nexport var closeButton = \"counterWithLabel-module--closeButton--3Koff\";","import { createContext } from \"react\"\n\nexport type Store<T> = {\n  load: () => T | null\n  save: (v: T) => void\n}\n\nexport type CounterProps = {\n  id: number\n  label: string\n  value: number\n}\n\nexport type CounterListStore = Store<CounterProps[]>\n\nexport const CounterListStoreContext = createContext<CounterListStore>({\n  load: () => null,\n  save: () => {},\n})\n","import type { CounterListStore, CounterProps } from \"~/contexts/storeContext\"\n\nconst counterListKey = \"counter-list\"\n\nexport const counterListStore: CounterListStore = {\n  load: () => {\n    if (typeof localStorage === \"undefined\") {\n      return null\n    }\n\n    const counterList = localStorage.getItem(counterListKey)\n    if (!counterList) {\n      return null\n    }\n    return JSON.parse(counterList)\n  },\n  save: (counterList: CounterProps[]) => {\n    if (typeof localStorage === \"undefined\") {\n      return\n    }\n\n    localStorage.setItem(counterListKey, JSON.stringify(counterList))\n  },\n}\n","// extracted by mini-css-extract-plugin\nexport var counterList = \"index-module--counterList--2lrXi\";\nexport var appendButton = \"index-module--appendButton--2Vm-b\";","import type { PageProps } from \"gatsby\"\nimport React, { useReducer, useState } from \"react\"\nimport CounterWithLabel from \"~/components/counterWithLabel\"\nimport type { CounterProps } from \"~/contexts/storeContext\"\nimport { CounterListStoreContext } from \"~/contexts/storeContext\"\nimport { counterListStore } from \"~/modules/localStorage\"\nimport * as styles from \"~/styles/pages/index.module.css\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\ntype Action =\n  | {\n      type: \"append\"\n      prop: CounterProps\n    }\n  | {\n      type: \"update\"\n      index: number\n      prop: CounterProps\n    }\n  | {\n      type: \"remove\"\n      index: number\n    }\n\nconst reducer = (state: CounterProps[], action: Action): CounterProps[] => {\n  let newState: CounterProps[]\n  switch (action.type) {\n    case \"append\":\n      newState = [...state, action.prop]\n      counterListStore.save(newState)\n      return newState\n\n    case \"update\":\n      newState = [...state]\n      newState[action.index] = action.prop\n      counterListStore.save(newState)\n      return newState\n\n    case \"remove\":\n      newState = state.filter((_, i) => i !== action.index)\n      counterListStore.save(newState)\n      return newState\n\n    default:\n      const _: never = action\n      return _\n  }\n}\n\nconst IndexPage: React.FC<PageProps> = () => {\n  const [nextId, setNextId] = useState(0)\n\n  const [counterList, dispatch] = useReducer(\n    reducer,\n    counterListStore.load() ?? []\n  )\n\n  return (\n    <CounterListStoreContext.Provider value={counterListStore}>\n      <Layout>\n        <Seo title=\"Home\" />\n        <div className={styles.counterList}>\n          {counterList.map((prop, i) => (\n            <CounterWithLabel\n              prop={prop}\n              update={newProp =>\n                dispatch({ type: \"update\", index: i, prop: newProp })\n              }\n              remove={() => dispatch({ type: \"remove\", index: i })}\n              key={prop.id}\n            />\n          ))}\n          <button\n            className={styles.appendButton}\n            onClick={() => {\n              dispatch({\n                type: \"append\",\n                prop: { id: nextId, label: \"\", value: 0 },\n              })\n              setNextId(nextId >= Number.MAX_SAFE_INTEGER ? 0 : nextId + 1)\n            }}\n          ></button>\n        </div>\n      </Layout>\n    </CounterListStoreContext.Provider>\n  )\n}\n\nexport default IndexPage\n"],"names":["value","update","className","onClick","prop","remove","defaultValue","label","placeholder","onInput","e","currentTarget","CounterListStoreContext","createContext","load","save","counterListKey","counterListStore","localStorage","counterList","getItem","JSON","parse","setItem","stringify","reducer","state","action","newState","type","index","filter","_","i","nextId","setNextId","useState","dispatch","useReducer","Provider","title","map","newProp","key","id","Number","MAX_SAFE_INTEGER"],"sourceRoot":""}